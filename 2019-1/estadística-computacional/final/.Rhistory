g[1] = 1
M = 10000
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_w+d)
g[i+1] = rgamma(1,sum_w+c,l[i]*sum_n+d)
}
ts.plot
ts.plot(g)
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
ts.plot(g)
ts.plot(gamma,col=2,xlab="iteraci?n")
ts.plot(gamma,col=2,xlab="iteraci?n")
setwd("C:/Users/cocam/Documents/2019-1/Est. Computacional/Final/Parte 2")
data<-read.csv(file.choose())
library(data.table)
library(dplyr)
library(MCMCpack)
M<-10000
a<-0.01
b<-0.01
c<-0.01
d<-0.01
muertes<-aggregate(data$muertes, by=list(region=data$region), FUN=sum)
habitantes<-aggregate(data$habitantes, by=list(region=data$region), FUN=sum)
sy<-muertes[1,2]
sw<-muertes[2,2]
sk<-habitantes[1,2]
sm<-habitantes[2,2]
lambda<-numeric()
gamma<-numeric()
#valores iniciales
lambda[1]<-1
gamma[1]<-1
for(h in 1:M){
lambda[h+1]<-rgamma(1,sy+sw+a,gamma[h]*sk+sm+b)
gamma[h+1]<-rgamma(1,sy+c,lambda[h]*sk+d)
}
#convergencia de la cadena
par(mfrow=c(1,2))
ts.plot(lambda,col=2,xlab="iteraci?n")
ts.plot(gamma,col=2,xlab="iteraci?n")
#autocorrelaci?n
acf(as.mcmc(lambda))
acf(as.mcmc(gamma))
#histogramas
hist(lambda,prob=TRUE)
hist(gamma,prob=TRUE)
#Estimaci?n puntual de los par?metros
hat.lambda<-mean(lambda)
hat.gamma<-mean(gamma)
hat.lambda;hat.gamma
#Estimaci?n por intervalo
# Intervalo de credibilidad al 95%
int.lambda<-quantile(lambda,probs=c(0.025,0.975))
int.gamma<-quantile(gamma,probs=c(0.025,0.975))
int.lambda;int.gamma
mean(lambda*gamma>gamma)
y.new.sim=rpois(M,20*lambda*gamma)
w.new.sim=rpois(M,20*gamma)
mean(y.new.sim>w.new.sim)
rm(list=ls())
a = b = c = d = 0.01
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
ts.plot(g)
ts.plot(l)
acf(g)
acf(l)
hist(g)
hist(l)
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975))
hat.lambda;hat.gamma
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975))
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
rm(list=ls())
## << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
## << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
setwd("C:/Users/cocam/Documents/2019-1/Est. Computacional/Final/Parte 2")
data<-read.csv(file.choose())
library(data.table)
library(dplyr)
library(MCMCpack)
M<-10000
a<-0.01
b<-0.01
c<-0.01
d<-0.01
muertes<-aggregate(data$muertes, by=list(region=data$region), FUN=sum)
habitantes<-aggregate(data$habitantes, by=list(region=data$region), FUN=sum)
sy<-muertes[1,2]
sw<-muertes[2,2]
sk<-habitantes[1,2]
sm<-habitantes[2,2]
lambda<-numeric()
gamma<-numeric()
#valores iniciales
lambda[1]<-1
gamma[1]<-1
for(h in 1:M){
lambda[h+1]<-rgamma(1,sy+sw+a,gamma[h]*sk+sm+b)
gamma[h+1]<-rgamma(1,sy+c,lambda[h]*sk+d)
}
#convergencia de la cadena
par(mfrow=c(1,2))
ts.plot(lambda,col=2,xlab="iteraci?n")
ts.plot(gamma,col=2,xlab="iteraci?n")
#autocorrelaci?n
acf(as.mcmc(lambda))
acf(as.mcmc(gamma))
#histogramas
hist(lambda,prob=TRUE)
hist(gamma,prob=TRUE)
#Estimaci?n puntual de los par?metros
hat.lambda<-mean(lambda)
hat.gamma<-mean(gamma)
hat.lambda;hat.gamma
#Estimaci?n por intervalo
# Intervalo de credibilidad al 95%
int.lambda<-quantile(lambda,probs=c(0.025,0.975))
int.gamma<-quantile(gamma,probs=c(0.025,0.975))
int.lambda;int.gamma
mean(lambda*gamma>gamma)
y.new.sim=rpois(M,20*lambda*gamma)
w.new.sim=rpois(M,20*gamma)
mean(y.new.sim>w.new.sim)
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l*g)
mean(sim_y>sim_w)
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l*g)
mean(sim_y>sim_w)
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l*g)
mean(sim_y>sim_w)
sim_w = rpois(O,20*l*g,log=F)
sim_y = rpois(O,20*l*g,log=T)
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l*g)
mean(sim_y>sim_w)
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l)
mean(sim_y>sim_w)
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*l)
mean(sim_y>sim_w)
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*g)
mean(sim_y>sim_w)
region=="contaminada"]
pba[region=="contaminada"]
pba[pba$region=="contaminada"]
pba[pba$region==1]
pba[pba$region==1]
pba[pba$region==1]
pba[pba$region==1]
pba[pba$region==1]
pba[pba$region==1]
pba2= pba[pba$region==!]
pba2= pba[pba$region==1]
View(pba2)
pba2= pba[,pba$region==1]
pba2= pba[,pba$region=="contaminada"]
pba2= pba[pba$region=="contaminada"]
pba2= pba[pba$region="contaminada"]
pba2= pba[pba$region==1]
pba2= pba[pba$region==1,1:2]
pba2= pba[pba$region==1]
pba2= pba %>% filter(region==1)
pba2= pba %>% filter(as.numeric(region)==1)
rpois(J,pba2*g*l)
J = 10000
pba2= pba %>% filter(as.numeric(region)==1)
rpois(J,pba2*g*l)
rpois(J,pba2$muertes*g*l)
y_sim=rpois(J,pba2$muertes*g*l)
pba2
pba2$muertes*g*l
y_sim=rpois(J,pba2$muertes*mean(g)*mean(l))
mean(lambda*gamma > gamma)
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+d)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
mean(lambda*gamma > gamma)
#### 5.e. Considere un nuevo distrito a ser analizado con una población de 20 mil habitantes que está cercano al reactor y otro nuevo distrito también con 20 mil habitantes alejado del reactor. Calcule la probabilidad que haya más muertes por cáncer en el distrito cercano al reactor. Interprete.
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*g)
mean(sim_y>sim_w)
mean(l*g > g)
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
g[order(g)]
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
g[order(g)]
mean(l[order(l)]*g[order(g)] > g[order(g)])
mean(l[order(l)]*g[order(g)] > g[order(g),desc=F])
mean(l[order(l)]*g[order(g)] > g[order(g)])
mean(sim_y[order(sim_y)]>sim_w)
mean(sim_y[order(sim_y)]>sim_w[order(sim_w)])
acf(g)
acf(l)
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
mean(l[order(l)]*g[order(g)] > g[order(g)])
mean(sim_y[order(sim_y)]>sim_w[order(sim_w)])
rm(list=ls())
#### Justo Manrique - 20091107
#### Respuesta en comentarios
#### << Carga y procesamiento de los datos >>
setwd("C:/Users/jaman/Documents/GitHub/maestria-pucp/2019-1/estadística-computacional/final")
pba = read.csv("cancer.csv")
library(dplyr)
tot_hab = pba %>% group_by(region) %>% summarise(tot_hab = sum(habitantes))
tot_mte = pba %>% group_by(region) %>% summarise(tot_mte = sum(muertes))
sum_y = as.numeric(tot_mte[1,2])
sum_w = as.numeric(tot_mte[2,2])
sum_n = as.numeric(tot_hab[1,2])
sum_m = as.numeric(tot_hab[2,2])
set.seed(239429)
#### << 5.b. Algoritmo de Gibbs >>
a = b = c = d = 0.01
l = numeric()
g = numeric()
l[1] = 1
g[1] = 1
M = 10000
# Rpta: Implementación del algoritmo
for (i in 1:M) {
l[i+1] = rgamma(1,sum_y+sum_w+a,g[i]*sum_n+sum_m+b)
g[i+1] = rgamma(1,sum_y+c,l[i]*sum_n+d)
}
# Rpta: Gráfico de la cadena
ts.plot(g)
ts.plot(l)
# Se observa convergencia en ambos parámetros.
# Rpta: Gráfico de autocorrelación
acf(g)
acf(l)
# Se observa que la cadena es de orden 1.
# Rpta: Histograma
hist(g)
hist(l)
#### 5.c. Estimación en forma puntual y por intervalo
p_lambda = c(quantile(l,0.025),mean(l),quantile(l,0.975));p_lambda
# La tasa lambda tiene como media 2.22 y el intervalo de credibilidad es de [2.10,2.33]
p_gamma = c(quantile(g,0.025),mean(g),quantile(g,0.975));p_gamma
# La tasa gamma tiene como media 1.21 y el intervalo de credibilidad es de [1.21,1.38]
#### 5.d. Calcule la probabilidad que la tasa de muertes en los distritos cercanos al reactor sea mayor que la tasa de los distritos que se encuentran alejados
mean(l[order(l)]*g[order(g)] > g[order(g)])
# Rpta: Se observa que es casi seguro (probabilidad del 0.9999) que la tasa de muertes en los distritos cercanos al reactor es mayor a las que se encuentran alejados.
#### 5.e. Considere un nuevo distrito a ser analizado con una población de 20 mil habitantes que está cercano al reactor y otro nuevo distrito también con 20 mil habitantes alejado del reactor. Calcule la probabilidad que haya más muertes por cáncer en el distrito cercano al reactor. Interprete.
O = 10000
sim_y = rpois(O,20*l*g)
sim_w = rpois(O,20*g)
mean(sim_y[order(sim_y)]>sim_w[order(sim_w)])
# Rpta: Se observa que es un evento seguro (probabilidad de 1) que la tasa de muertes, para una población de 20 mil habitantes, será mayor si está cerca del reactor que lejos.
